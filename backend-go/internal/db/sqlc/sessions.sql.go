// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: sessions.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSession = `-- name: CreateSession :one
INSERT INTO user_sessions (user_id, session_token, expires_at)
VALUES ($1, $2, $3)
RETURNING id, user_id, session_token, created_at, expires_at
`

type CreateSessionParams struct {
	UserID       int32
	SessionToken string
	ExpiresAt    pgtype.Timestamp
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (UserSession, error) {
	row := q.db.QueryRow(ctx, createSession, arg.UserID, arg.SessionToken, arg.ExpiresAt)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionToken,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE
FROM user_sessions
WHERE session_token = $1
`

func (q *Queries) DeleteSession(ctx context.Context, sessionToken string) error {
	_, err := q.db.Exec(ctx, deleteSession, sessionToken)
	return err
}

const getSession = `-- name: GetSession :one
SELECT id, user_id, session_token, created_at, expires_at
FROM user_sessions
WHERE session_token = $1
`

func (q *Queries) GetSession(ctx context.Context, sessionToken string) (UserSession, error) {
	row := q.db.QueryRow(ctx, getSession, sessionToken)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionToken,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}
