// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, pass)
VALUES ($1, $2)
RETURNING id, email, pass, created_at
`

type CreateUserParams struct {
	Email string
	Pass  string
}

type CreateUserRow struct {
	ID        int32
	Email     string
	Pass      string
	CreatedAt pgtype.Timestamp
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.Pass)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Pass,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, pass, created_at
FROM users
WHERE email = $1
`

type GetUserByEmailRow struct {
	ID        int32
	Email     string
	Pass      string
	CreatedAt pgtype.Timestamp
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Pass,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, pass, created_at
FROM users
ORDER BY created_at DESC
`

type ListUsersRow struct {
	ID        int32
	Email     string
	Pass      string
	CreatedAt pgtype.Timestamp
}

func (q *Queries) ListUsers(ctx context.Context) ([]ListUsersRow, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Pass,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
